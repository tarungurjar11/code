//https://www.hackerrank.com/challenges/jim-and-the-jokes/problem


#include <assert.h>
#include <limits.h>
#include <math.h>
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

char* readline();
char** split_string(char*);

int check(int a,int b)
{
    if(a<2)
        return 0;
    while(b!=0)
    {
        if(b%10>=a)
            return 0;
            b=b/10;
    }
    return 1;
}
int con(int a,int b)
{
    int i=0,j=0;
    while(b!=0){
        i=i+(b%10)*pow(a,j);
        b=b/10;
        j++;
    }
    
    return i;
}
// Complete the solve function below.
long long int solve(int dates_rows, int dates_columns, int** dates) {
    int arr[40]={0};
    
    for(int i=0;i<dates_rows;i++)
    {
        int x1=dates[i][0],x2=dates[i][1];
        if(check(x1,x2) )
            arr[con(x1,x2)]++;
    }
    long long int count=0;
    for(int i=0;i<40;i++)
    {
        if(arr[i]!=0)
            count=count+((long long int)(arr[i]-1)*arr[i])/2 ;
    }
return count;
}

int main()
{
    FILE* fptr = fopen(getenv("OUTPUT_PATH"), "w");

    char* n_endptr;
    char* n_str = readline();
    int n = strtol(n_str, &n_endptr, 10);

    if (n_endptr == n_str || *n_endptr != '\0') { exit(EXIT_FAILURE); }

    int** dates = malloc(n * sizeof(int*));

    for (int dates_row_itr = 0; dates_row_itr < n; dates_row_itr++) {
        *(dates + dates_row_itr) = malloc(2 * (sizeof(int)));

        char** dates_item_temp = split_string(readline());

        for (int dates_column_itr = 0; dates_column_itr < 2; dates_column_itr++) {
            char* dates_item_endptr;
            char* dates_item_str = *(dates_item_temp + dates_column_itr);
            int dates_item = strtol(dates_item_str, &dates_item_endptr, 10);

            if (dates_item_endptr == dates_item_str || *dates_item_endptr != '\0') { exit(EXIT_FAILURE); }

            *(*(dates + dates_row_itr) + dates_column_itr) = dates_item;
        }
    }

    int dates_rows = n;
    int dates_columns = 2;

    long long int result = solve(dates_rows, dates_columns, dates);

    fprintf(fptr, "%lld\n", result);

    fclose(fptr);

    return 0;
}

char* readline() {
    size_t alloc_length = 1024;
    size_t data_length = 0;
    char* data = malloc(alloc_length);

    while (true) {
        char* cursor = data + data_length;
        char* line = fgets(cursor, alloc_length - data_length, stdin);

        if (!line) { break; }

        data_length += strlen(cursor);

        if (data_length < alloc_length - 1 || data[data_length - 1] == '\n') { break; }

        size_t new_length = alloc_length << 1;
        data = realloc(data, new_length);

        if (!data) { break; }

        alloc_length = new_length;
    }

    if (data[data_length - 1] == '\n') {
        data[data_length - 1] = '\0';
    }

    data = realloc(data, data_length);

    return data;
}

char** split_string(char* str) {
    char** splits = NULL;
    char* token = strtok(str, " ");

    int spaces = 0;

    while (token) {
        splits = realloc(splits, sizeof(char*) * ++spaces);
        if (!splits) {
            return splits;
        }

        splits[spaces - 1] = token;

        token = strtok(NULL, " ");
    }

    return splits;
}
